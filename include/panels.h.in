#ifndef __PN_H__
#define __PN_H__

#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#ifndef PN_EXPORT
#  define PN_EXPORT extern
#endif


#ifdef __cplusplus
extern "C" {
#endif

// Number of mouse (pointer) buttons:
#define PN_NUM_BUTTONS    (3)


// List of action callback types
//
// These numbers are indexes into arrays, and have values that are
// dependent on the order of widget inheritance.  It takes a test run to
// check all these values.  The test must create all the widgets that are
// in libpanels.so.  If action callback types are added tests must be run
// to verify all these values.  If any of these numbers are wrong
// pnWidget_addAction() will throw an assertion.
//
#define PN_BUTTON_CB_CLICK 0 // after release
#define PN_BUTTON_CB_PRESS 1 // after press



#define PN_PIXEL_SIZE     (4) // bytes per pixel
// DEFAULTS
#define PN_BORDER_WIDTH   (6) // default border pixels wide
#define PN_WINDOW_BGCOLOR (0xFF999900)
#define PN_DEFAULT_WINDOW_WIDTH  (400)
#define PN_DEFAULT_WINDOW_HEIGHT (400)
#define PN_DEFAULT_WIDGET_WIDTH  (40)
#define PN_DEFAULT_WIDGET_HEIGHT (40)


// We are putting this in libpanels API users C/C++ code.
// We define the PN_WITH_CAIRO and PN_WITH_FONTCONFIG
// when the libpanels library has additional interfaces that
// require it to be linked with libcairo and other libraries.
//
@define_WITH_FONTCONFIG@
@define_WITH_CAIRO@


#ifdef PN_WITH_CAIRO
#include <cairo/cairo.h>
#endif

// We make default enumeration values be 0.  That saves a ton of
// development time.


// Child widget direction/layout packing order
//
// Container widget attribute PnLayout.
// How the children are laid out.
//
// Is there a "field/branch" in mathematics that we can know that will
// give use a more optimal way to parametrise widget rectangle packing?
// We need to keep in mind that our rectangles can grown and shrink as
// needed to make the resulting window fully packed (with no gaps).
//
// Like text flow direction.  Example: in English words of on the page
// from left to right, the first word read is on the left.
//
// Packing order direction: example PnLayout_RL means the first added
// goes to the right side, second added goes next to the first just to the
// left of the first, and so on ...
//
enum PnLayout {

    // PnLayout is a attribute of a widget (surface) container (or lack
    // thereof), be it a widget or window.

    // PnLayout_None and PnLayout_One just add failure modes for when
    // the user adds extra children.

    // no gravity to hold widgets.  Cannot have any children.
    PnLayout_None = -2, // For non-container widgets or windows

    // The container surface can only have zero or one widget.
    PnLayout_One = -1,

    // Windows (and widgets) with all the below gravities can have zero
    // or more children.

    // T Top, B Bottom, L Left, R Right
    //
    // Horizontally row of child widgets:
    //
    // We use 0 so that PnLayout_LR is the default; it certainly made
    // writing test code easier.
    //
    PnLayout_LR = 0, // child widgets assemble from left to right
    PnLayout_RL = 1, // child widgets assemble from right to left

    // Vertically column of child widgets:
    //
    PnLayout_TB = 2, // child widgets assemble top to bottom
    //
    // PnLayout_BT is like real world gravity pulling down where the
    // starting widget gets squished on the bottom.
    PnLayout_BT = 3, // child widgets assemble bottom to top

    // X/Y indexed grid layout container.  Coordinates are (0,0) to
    // (M-1,N-1).
    PnLayout_Grid = 4,

    // We could use this layout to make a notebook, or other container
    // packing method. The window or widget will define its own packing.
    PnLayout_Callback
};


// Expansiveness (space greed) is an attribute of a widget and not the
// container it is in.  A container that contains a widget that can
// expand, can also expand given space to the contained widget while not
// expanding it's border sizes.  The expand attribute of a container
// widget does not effect the container widgets border size unless all
// the children widgets do not expand (in the direction of interest).
//
// Sibling widgets (widgets in the same container) that can expand share
// the extra space.
//
// Exception: A top level window that cannot expand (resize) unless the
// user set its expand flag; in pnWindow_create() or other function.
//
enum PnExpand {
    // H Horizontal first bit, V Vertical second bit
    PnExpand_None = 00, // The widget is not greedy for any space
    PnExpand_H    = 01, // The widget is greedy for Horizontal space
    PnExpand_V    = 02, // The widget is greedy for Vertical space
    PnExpand_HV   = (01 | 02), // The widget is greedy for all 2D space
    PnExpand_VH   = (01 | 02)  // The widget is greedy for all 2D space
};


// The align attribute is a little bit wonky.  There seems to be no way
// around it, if we wish to minimize the widget interfaces.
//
// Align is a:
//
//   1. Container (non-grid) widget attribute for child widget layout,
//   2. A Label widget attribute for test layout, and
//   3. A widget attribute for widgets that are directly in a grid cell.
//
// Reasoning:
//
//   1. The alignment of many children in a hBox or vBox needs one
//   parameter.  We can't align cells that are together in different
//   alignment ways, the same sibling children widgets have to share the
//   same alignment attribute.
//   2. The label widget needs to control placement of the text on it's
//   drawing surface.
//   3. We want to be able to make something like HTML tables where
//   each table cell can have different alignments.  Menus require this
//   too.  Same sibling children widgets in a grid cannot share the same
//   alignment attribute.
//
// It goes without saying that a widget that can expand, can't align, it
// just fills the available space in the direction of interest (X or Y).
// If any of the widgets in the container can expand, than the Align
// value of the container is not considered.
//
// Put another way: the "align" widget attribute does not adjust the child
// widget sizes, it can just change the child widgets positions; but only
// if none of the sibling widgets expand to take all the "extra" space.
//
// If there is extra space for a widget that will not be filled, we
// align (float) the widget into position.
//

// There is another aspect widget alignment that seem to be set by the
// windowing managers (compositor for WayLand) on all common operating
// systems.  That is how are widgets aligned before culling happens.
// Notice that widgets in most windows get culled from right to left and
// from bottom to top; so that the widgets at the left top are the last to
// be culled as the window is made smaller.  The widget placement and
// sizing (space allocation) code is based on this idea.  libpanels.so
// lets you have windows of any size with and any number of widgets.  The
// widgets get culled using the left top alignment rule, and then the
// users coded in alignment rules are applied after the widget culling.

// The default "align" is centered along x and y:

// x -> first 2 bits  y -> next 2 bits

#define PN_ALIGN_X  (03)
#define PN_ALIGN_Y  (03 << 2)


#define PN_ALIGN_X_CENTER    (00) // default
#define PN_ALIGN_X_LEFT      (01)
#define PN_ALIGN_X_RIGHT     (02)
#define PN_ALIGN_X_JUSTIFIED (03)

#define PN_ALIGN_Y_CENTER    (00) // default
#define PN_ALIGN_Y_TOP       (01 << 2)
#define PN_ALIGN_Y_BOTTOM    (02 << 2)
#define PN_ALIGN_Y_JUSTIFIED (03 << 2)

enum PnAlign {

    // x -> first 2 bits  y -> next 2 bits  16 values total

    PnAlign_CC = (PN_ALIGN_X_CENTER    | PN_ALIGN_Y_CENTER), // = 0
    PnAlign_LC = (PN_ALIGN_X_LEFT      | PN_ALIGN_Y_CENTER),
    PnAlign_RC = (PN_ALIGN_X_RIGHT     | PN_ALIGN_Y_CENTER),
    PnAlign_JC = (PN_ALIGN_X_JUSTIFIED | PN_ALIGN_Y_CENTER),

    PnAlign_CT = (PN_ALIGN_X_CENTER    | PN_ALIGN_Y_TOP),
    PnAlign_LT = (PN_ALIGN_X_LEFT      | PN_ALIGN_Y_TOP),
    PnAlign_RT = (PN_ALIGN_X_RIGHT     | PN_ALIGN_Y_TOP),
    PnAlign_JT = (PN_ALIGN_X_JUSTIFIED | PN_ALIGN_Y_TOP),

    PnAlign_CB = (PN_ALIGN_X_CENTER    | PN_ALIGN_Y_BOTTOM),
    PnAlign_LB = (PN_ALIGN_X_LEFT      | PN_ALIGN_Y_BOTTOM),
    PnAlign_RB = (PN_ALIGN_X_RIGHT     | PN_ALIGN_Y_BOTTOM),
    PnAlign_JB = (PN_ALIGN_X_JUSTIFIED | PN_ALIGN_Y_BOTTOM),

    PnAlign_CJ = (PN_ALIGN_X_CENTER    | PN_ALIGN_Y_JUSTIFIED),
    PnAlign_LJ = (PN_ALIGN_X_LEFT      | PN_ALIGN_Y_JUSTIFIED),
    PnAlign_RJ = (PN_ALIGN_X_RIGHT     | PN_ALIGN_Y_JUSTIFIED),
    PnAlign_JJ = (PN_ALIGN_X_JUSTIFIED | PN_ALIGN_Y_JUSTIFIED)
};


struct PnWidget;


PN_EXPORT void pnDisplay_destroy(void);
PN_EXPORT bool pnDisplay_dispatch(void);
PN_EXPORT bool pnDisplay_haveXDGDecoration(void);

PN_EXPORT struct PnWidget *pnWindow_create(
        // parent = 0 for toplevel
        // parent != 0 for popup
        struct PnWidget *parent,
        /* For containers, width is left/right border thickness, height is
         * top/bottom border thickness. */
        uint32_t width, uint32_t height,
        int32_t x, int32_t y,
        enum PnLayout layout,
        enum PnAlign align,
        enum PnExpand expand);
PN_EXPORT struct PnWidget *pnWindow_createAsGrid(
        struct PnWidget *parent,
        uint32_t width, uint32_t height, int32_t x, int32_t y,
        enum PnAlign align, enum PnExpand expand,
        uint32_t numColumns, uint32_t numRows);
// We have one theme per app process.
//
// TODO: Have many themes per process?
// Cool to see widgets and windows in an app with many different themes.
PN_EXPORT void pnDisplay_setTheme(const char *theme);

PN_EXPORT bool pnWindow_isDrawn(struct PnWidget *window);
PN_EXPORT void pnWindow_isDrawnReset(struct PnWidget *window);
PN_EXPORT void pnWindow_destroy(struct PnWidget *window);
PN_EXPORT void pnWindow_show(struct PnWidget *window, bool show);
PN_EXPORT void pnWindow_setDestroy(struct PnWidget *window,
        void (*destroy)(struct PnWidget *window, void *userData),
        void *userData);

PN_EXPORT struct PnWidget *pnWidget_create(
        struct PnWidget *parent,
        uint32_t width, uint32_t height,
        enum PnLayout layout,
        enum PnAlign align,
        enum PnExpand expand, size_t size);
PN_EXPORT struct PnWidget *pnWidget_createAsGrid(
        struct PnWidget *parent, uint32_t w, uint32_t h,
        enum PnAlign align, enum PnExpand expand, 
        uint32_t numColumns, uint32_t numRows,
        size_t size);
PN_EXPORT struct PnWidget *pnWidget_createInGrid(
        struct PnWidget *grid, uint32_t w, uint32_t h,
        enum PnLayout layout,
        enum PnAlign align, enum PnExpand expand, 
        uint32_t columnNum, uint32_t rowNum,
        uint32_t columnSpan, uint32_t rowSpan,
        size_t size);
PN_EXPORT void pnWidget_addChild(struct PnWidget *parent,
        struct PnWidget *child);
PN_EXPORT void pnWidget_addChildToGrid(struct PnWidget *parent,
        struct PnWidget *child,
        uint32_t columnNum, uint32_t rowNum,
        uint32_t columnSpan, uint32_t rowSpan);

PN_EXPORT void pnWidget_show(struct PnWidget *widget, bool show);
PN_EXPORT void pnWidget_destroy(struct PnWidget *widget);
PN_EXPORT void pnWidget_addDestroy(struct PnWidget *widget,
        void (*destroy)(struct PnWidget *widget, void *userData),
        void *userData);


PN_EXPORT void pnWidget_setBackgroundColor(
        struct PnWidget *w, uint32_t argbColor);

PN_EXPORT uint32_t pnWidget_getBackgroundColor(struct PnWidget *w);

PN_EXPORT void pnWidget_setDraw(struct PnWidget *w,
        int (*draw)(struct PnWidget *widget, uint32_t *pixels,
            uint32_t w, uint32_t h, uint32_t stride/*4 byte chunks*/,
            void *userData), void *userData);


struct PnAllocation {

    // These x, y values are measured relative to the window, NOT parent
    // widgets (like in GTK).
    uint32_t x, y, width, height;
};


PN_EXPORT void pnWidget_getAllocation(const struct PnWidget *w,
        struct PnAllocation *a);

PN_EXPORT void pnWidget_setConfig(struct PnWidget *w,
        void (*config)(struct PnWidget *widget, uint32_t *pixels,
            uint32_t x, uint32_t y,
            uint32_t w, uint32_t h, uint32_t stride/*4 byte chunks*/,
            void *userData), void *userData);

PN_EXPORT void pnWidget_queueDraw(struct PnWidget *w);

#if 0
PN_EXPORT void pnWidget_setMinWidth(struct PnWdiget *w, uint32_t width);
#endif


// For a widget to get mouse pointer focus it needs a
// "enter" and a "leave" callback.
//
PN_EXPORT void pnWidget_setEnter(struct PnWidget *w,
        bool (*enter)(struct PnWidget *widget,
            uint32_t x, uint32_t y, void *userData),
        void *userData);

PN_EXPORT void pnWidget_setLeave(struct PnWidget *w,
        void (*leave)(struct PnWidget *widget, void *userData),
        void *userData);

PN_EXPORT void pnWidget_setPress(struct PnWidget *w,
        bool (*press)(struct PnWidget *widget,
            uint32_t which,
            int32_t x, int32_t y, void *userData),
        void *userData);

PN_EXPORT void pnWidget_setRelease(struct PnWidget *w,
        bool (*release)(struct PnWidget *widget,
            uint32_t which,
            int32_t x, int32_t y, void *userData),
        void *userData);

PN_EXPORT void pnWidget_setMotion(struct PnWidget *w,
        bool (*motion)(struct PnWidget *widget,
                int32_t x, int32_t y, void *userData),
        void *userData);

PN_EXPORT void pnWidget_addAction(struct PnWidget *widget,
        uint32_t actionIndex,
        bool (*action)(struct PnWidget *widget,
            // The callback() can be any function prototype.  It's just a
            // pointer to any kind of function.  We'll pass this pointer
            // to the action function that knows what to do with it.
            void *callback, void *userData, void *actionData),
        void *actionData);

PN_EXPORT void pnWidget_callAction(struct PnWidget *widget,
        uint32_t index);

PN_EXPORT void pnWidget_addCallback(struct PnWidget *widget,
        uint32_t index,
        // The callback function prototype varies with particular widget
        // and index.  The widget maker must publish a list of function
        // prototypes and indexes; example: PN_BUTTON_CB_CLICK.
        void *callback, void *userData);


PN_EXPORT bool pnWidget_isInSurface(const struct PnWidget *w,
        uint32_t x, uint32_t y);


/////////////////////////////////////////////////////////////////
// If libpanels.so is built with libfontconfig.so
#ifdef PN_WITH_FONTCONFIG

PN_EXPORT char *pnFindFont(const char *exp);

#endif // #ifdef PN_WITH_FONTCONFIG

/////////////////////////////////////////////////////////////////
// If libpanels.so is built with libcairo.so
#ifdef PN_WITH_CAIRO

PN_EXPORT void pnWidget_setCairoDraw(struct PnWidget *widget,
        int (*draw)(struct PnWidget *w, cairo_t *cr, void *userData),
        void *userData);

PN_EXPORT struct PnWidget *pnButton_create(struct PnWidget *parent,
        uint32_t width, uint32_t height,
        enum PnLayout layout, enum PnAlign align,
        enum PnExpand expand,
        const char *label, bool toggle, size_t size);

PN_EXPORT struct PnWidget *pnLabel_create(struct PnWidget *parent,
        // width = 0 --> figure out width.
        // height = 0 --> figure out height.
        uint32_t width, uint32_t height,
        uint32_t xPadding, uint32_t yPadding,
        enum PnAlign align, // for text alignment
        enum PnExpand expand,
        const char *text, size_t size);


PN_EXPORT void pnLabel_setFontColor(struct PnWidget *label,
        uint32_t color);


// Advanced API:
///////////////////////////////////////////////////////////////////
struct PnGraph;

PN_EXPORT void pnGraph_drawGrids(const struct PnGraph *g,
        cairo_t *cr, bool show_subGrid);
PN_EXPORT void pnGraph_pushZoom(struct PnGraph *g,
        double xMin, double xMax, double yMin, double yMax);
// Returns true if there are zooms left to pop after this call; else it
// returns false.  Frees zooms that are popped.  This will not free the
// last (current) zoom.  Returns false when there is one left.
PN_EXPORT bool pnGraph_popZoom(struct PnGraph *g);



#define PN_R_DOUBLE(color) (((color & 0x00FF0000) >> 16)/(255.0))
#define PN_G_DOUBLE(color) (((color & 0x0000FF00) >> 8)/(255.0))
#define PN_B_DOUBLE(color) (( color & 0x000000FF)/(255.0))
#define PN_A_DOUBLE(color) (((color & 0xFF000000) >> 24)/(255.0))

#endif // #ifdef PN_WITH_CAIRO


#ifdef __cplusplus
}
#endif


#endif
